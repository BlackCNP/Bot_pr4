
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import keyboards as kb
from data import get_genres, get_movies_by_genre, find_movie_by_title
from weather import get_weather

router = Router()

# –°—Ç–∞–Ω–∏
class OrderState(StatesGroup):
    waiting_for_email = State()

class WeatherState(StatesGroup):
    waiting_for_city = State()

# –ö–æ–º–∞–Ω–¥–∏ 

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
   
    await message.answer(
        f"üëã –í—ñ—Ç–∞—é, {message.from_user.first_name}, –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ —Ñ—ñ–ª—å–º—ñ–≤!\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ–±—Ä–∞—Ç–∏ —Ç–∞ –∑–∞–º–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å–º –∞–±–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É.\n\n"
        "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∞–±–æ –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é:\n"
        "/help - –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É\n"
        "/genres - –ø–æ–∫–∞–∑–∞—Ç–∏ –∂–∞–Ω—Ä–∏ —Ñ—ñ–ª—å–º—ñ–≤\n"
        "/weather - –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É\n"
        "/info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞",
        reply_markup=kb.main_kb
    )

@router.message(Command('help'))
async def cmd_help(message: Message, state: FSMContext):
    await state.clear()
   
    help_text = (
        "‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ–±—Ä–∞—Ç–∏ —Ñ—ñ–ª—å–º —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "üîπ /start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "üîπ /help - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "üîπ /info - –∫–æ—Ä–æ—Ç–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n"
        "üîπ /genres - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä—ñ–≤ —Ñ—ñ–ª—å–º—ñ–≤\n"
        "üîπ /weather - –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É\n\n"
        "–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó."
    )
    
    await message.answer(help_text, reply_markup=kb.main_kb)

@router.message(Command('info'))
async def cmd_info(message: Message, state: FSMContext):
    await state.clear()
    
    info_text = (
        "ü§ñ <b>–ü—Ä–æ –±–æ—Ç–∞:</b>\n\n"
        "–¶–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω —Ñ—ñ–ª—å–º—ñ–≤.\n"
        "–í—ñ–Ω –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏ –∑–∞ –∂–∞–Ω—Ä–∞–º–∏, –±–∞—á–∏—Ç–∏ —ó—Ö –æ–ø–∏—Å —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥, "
        "–∞ —Ç–∞–∫–æ–∂ —ñ–º—ñ—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∑–±–∏—Ä–∞—î email).\n"
        "–¢–∞–∫–æ–∂ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–≥–æ–¥–∏ —á–µ—Ä–µ–∑ OpenWeatherMap.\n\n"
        "–í–µ—Ä—Å—ñ—è: 1.1"
    )
    await message.answer(info_text, reply_markup=kb.main_kb)

@router.message(Command('genres'))
async def cmd_genres(message: Message, state: FSMContext):
    await state.clear()
    genres = get_genres()
    if not genres:
         await message.answer("–ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∂–∞–Ω—Ä—ñ–≤.", reply_markup=kb.main_kb)
         return
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:", reply_markup=kb.genres_inline_kb())


@router.message(Command('weather'))
async def cmd_weather(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, –¥–ª—è —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É:")
    await state.set_state(WeatherState.waiting_for_city)



@router.message(F.text == "üìú –û–±—Ä–∞—Ç–∏ –ñ–∞–Ω—Ä")
async def process_select_genre(message: Message, state: FSMContext):
    await state.clear()
    genres = get_genres()
    if not genres:
         await message.answer("–ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∂–∞–Ω—Ä—ñ–≤.")
         return
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:", reply_markup=kb.genres_inline_kb())

@router.message(F.text == "üå§Ô∏è –î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É")
async def process_get_weather(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, –¥–ª—è —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É:")
    await state.set_state(WeatherState.waiting_for_city)

# –û–±—Ä–æ–±–Ω–∏–∫ –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ–≥–æ–¥–∏

@router.message(WeatherState.waiting_for_city)
async def process_city_weather(message: Message, state: FSMContext):
    if not message.text or message.text.startswith('/'):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return

    city_name = message.text
    await state.update_data(city=city_name)
    weather_info = await get_weather(city_name)
    
    await message.answer(weather_info, reply_markup=kb.main_kb, parse_mode=None) 
    await state.clear()


# –û–±—Ä–æ–±–Ω–∏–∫–∏ Inline –∫–Ω–æ–ø–æ–∫

@router.callback_query(F.data == "back_to_genres")
async def process_back_to_genres(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await callback.message.edit_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:",
        reply_markup=kb.genres_inline_kb()
    )

@router.callback_query(F.data.startswith("genre_"))
async def process_genre_select(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    genre = callback.data.split("_")[1]
    await callback.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä: {genre.capitalize()}")
    movies = get_movies_by_genre(genre)
    if not movies:
        await callback.message.edit_text(
            f"–ù–∞ –∂–∞–ª—å, —É –∂–∞–Ω—Ä—ñ '{genre.capitalize()}' —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î.",
            reply_markup=kb.back_to_genres_inline_kb()
        )
        return

    await callback.message.edit_text(
        f"–§—ñ–ª—å–º–∏ –≤ –∂–∞–Ω—Ä—ñ '{genre.capitalize()}':",
        reply_markup=kb.movies_inline_kb(genre)
    )

@router.callback_query(F.data.startswith("back_to_movies_"))
async def process_back_to_movies(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    genre = callback.data.split("_")[-1]
    await callback.answer()
    await callback.message.edit_text(
        f"–§—ñ–ª—å–º–∏ –≤ –∂–∞–Ω—Ä—ñ '{genre.capitalize()}':",
        reply_markup=kb.movies_inline_kb(genre)
    )


@router.callback_query(F.data.startswith("movie_"))
async def process_movie_select(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        _, genre, title_part = callback.data.split("_", 2)
        movies_in_genre = get_movies_by_genre(genre)
        selected_movie = None
        for movie in movies_in_genre:
            if movie['title'].startswith(title_part):
                 selected_movie = movie
                 break

        if not selected_movie:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º –∑–∞ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞–∑–≤–∏: {title_part} –≤ –∂–∞–Ω—Ä—ñ {genre}")
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            await callback.message.edit_text(
                f"–§—ñ–ª—å–º–∏ –≤ –∂–∞–Ω—Ä—ñ '{genre.capitalize()}':",
                reply_markup=kb.movies_inline_kb(genre)
            )
            return

        await callback.answer()

        
        movie_info = (
            f"üé¨ <b>{selected_movie['title']}</b>\n\n"
            f"üìù <b>–û–ø–∏—Å:</b> {selected_movie['description']}\n\n"
            f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {selected_movie['rating']}/10\n"
            f"üí∞ <b>–¶—ñ–Ω–∞:</b> {selected_movie['price']} –≥—Ä–Ω"
        )
        await callback.message.edit_text(
            movie_info,
           
            reply_markup=kb.movie_details_inline_kb(genre, selected_movie['title'])
        )
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É —Ñ—ñ–ª—å–º—É:")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Ñ—ñ–ª—å–º—É.", show_alert=True)


@router.callback_query(F.data.startswith("order_"))
async def process_order_start(callback: CallbackQuery, state: FSMContext):
    try:
        _, genre, title_part = callback.data.split("_", 2)
        movies_in_genre = get_movies_by_genre(genre)
        selected_movie = None
        for movie in movies_in_genre:
            if movie['title'].startswith(title_part):
                 selected_movie = movie
                 break

        if not selected_movie:
            await callback.answer("–ü–æ–º–∏–ª–∫–∞: –§—ñ–ª—å–º –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        await state.update_data(movie_title=selected_movie['title'], genre=genre, price=selected_movie['price'])
        await callback.answer("–ü–æ—á–∏–Ω–∞—î–º–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...")
        
        await callback.message.answer(
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—É '{selected_movie['title']}', –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É <b>–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É</b>:",
        )
        await state.set_state(OrderState.waiting_for_email)

    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", show_alert=True)
        await state.clear()




@router.message(OrderState.waiting_for_email)
async def process_email_input(message: Message, state: FSMContext):
    if not message.text or '@' not in message.text or message.text.startswith('/'):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∞–¥—Ä–µ—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏.")
        return

    user_email = message.text
    order_data = await state.get_data()
    movie_title = order_data.get('movie_title', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ—ñ–ª—å–º')

    
    confirmation_message = (
        f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
        f"<b>–§—ñ–ª—å–º:</b> {movie_title}\n"
        f"<b>–í–∞—à–∞ –ø–æ—à—Ç–∞:</b> {user_email}\n"
        f"<b>–¶—ñ–Ω–∞:</b> 60 –≥—Ä–Ω\n\n"
        f"–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ‚ú®\n"
        f"–ù–µ–∑–∞–±–∞—Ä–æ–º –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç–∏ —Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."
    )
    await message.answer(confirmation_message, reply_markup=kb.main_kb)
    logging.info(f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: –§—ñ–ª—å–º='{movie_title}', Email='{user_email}'")
    await state.clear()